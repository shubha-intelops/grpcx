// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/v1/name-api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NameService_Ping_FullMethodName       = "/pb.NameService/Ping"
	NameService_CreateName_FullMethodName = "/pb.NameService/CreateName"
	NameService_GetName_FullMethodName    = "/pb.NameService/GetName"
	NameService_UpdateName_FullMethodName = "/pb.NameService/UpdateName"
	NameService_DeleteName_FullMethodName = "/pb.NameService/DeleteName"
	NameService_ListNames_FullMethodName  = "/pb.NameService/ListNames"
)

// NameServiceClient is the client API for NameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameServiceClient interface {
	Ping(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error)
	CreateName(ctx context.Context, in *CreateNameRequest, opts ...grpc.CallOption) (*CreateNameResponse, error)
	GetName(ctx context.Context, in *GetNameRequest, opts ...grpc.CallOption) (*GetNameResponse, error)
	UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error)
	DeleteName(ctx context.Context, in *DeleteNameRequest, opts ...grpc.CallOption) (*DeleteNameResponse, error)
	ListNames(ctx context.Context, in *ListNamesRequest, opts ...grpc.CallOption) (*ListNamesResponse, error)
}

type nameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNameServiceClient(cc grpc.ClientConnInterface) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) Ping(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := c.cc.Invoke(ctx, NameService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) CreateName(ctx context.Context, in *CreateNameRequest, opts ...grpc.CallOption) (*CreateNameResponse, error) {
	out := new(CreateNameResponse)
	err := c.cc.Invoke(ctx, NameService_CreateName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) GetName(ctx context.Context, in *GetNameRequest, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, NameService_GetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...grpc.CallOption) (*UpdateNameResponse, error) {
	out := new(UpdateNameResponse)
	err := c.cc.Invoke(ctx, NameService_UpdateName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) DeleteName(ctx context.Context, in *DeleteNameRequest, opts ...grpc.CallOption) (*DeleteNameResponse, error) {
	out := new(DeleteNameResponse)
	err := c.cc.Invoke(ctx, NameService_DeleteName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) ListNames(ctx context.Context, in *ListNamesRequest, opts ...grpc.CallOption) (*ListNamesResponse, error) {
	out := new(ListNamesResponse)
	err := c.cc.Invoke(ctx, NameService_ListNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameServiceServer is the server API for NameService service.
// All implementations must embed UnimplementedNameServiceServer
// for forward compatibility
type NameServiceServer interface {
	Ping(context.Context, *NameRequest) (*NameResponse, error)
	CreateName(context.Context, *CreateNameRequest) (*CreateNameResponse, error)
	GetName(context.Context, *GetNameRequest) (*GetNameResponse, error)
	UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error)
	DeleteName(context.Context, *DeleteNameRequest) (*DeleteNameResponse, error)
	ListNames(context.Context, *ListNamesRequest) (*ListNamesResponse, error)
	mustEmbedUnimplementedNameServiceServer()
}

// UnimplementedNameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNameServiceServer struct {
}

func (UnimplementedNameServiceServer) Ping(context.Context, *NameRequest) (*NameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedNameServiceServer) CreateName(context.Context, *CreateNameRequest) (*CreateNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateName not implemented")
}
func (UnimplementedNameServiceServer) GetName(context.Context, *GetNameRequest) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedNameServiceServer) UpdateName(context.Context, *UpdateNameRequest) (*UpdateNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedNameServiceServer) DeleteName(context.Context, *DeleteNameRequest) (*DeleteNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteName not implemented")
}
func (UnimplementedNameServiceServer) ListNames(context.Context, *ListNamesRequest) (*ListNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNames not implemented")
}
func (UnimplementedNameServiceServer) mustEmbedUnimplementedNameServiceServer() {}

// UnsafeNameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameServiceServer will
// result in compilation errors.
type UnsafeNameServiceServer interface {
	mustEmbedUnimplementedNameServiceServer()
}

func RegisterNameServiceServer(s grpc.ServiceRegistrar, srv NameServiceServer) {
	s.RegisterService(&NameService_ServiceDesc, srv)
}

func _NameService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).Ping(ctx, req.(*NameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_CreateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).CreateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_CreateName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).CreateName(ctx, req.(*CreateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_GetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).GetName(ctx, req.(*GetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_UpdateName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).UpdateName(ctx, req.(*UpdateNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_DeleteName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).DeleteName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_DeleteName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).DeleteName(ctx, req.(*DeleteNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_ListNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).ListNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NameService_ListNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).ListNames(ctx, req.(*ListNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NameService_ServiceDesc is the grpc.ServiceDesc for NameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _NameService_Ping_Handler,
		},
		{
			MethodName: "CreateName",
			Handler:    _NameService_CreateName_Handler,
		},
		{
			MethodName: "GetName",
			Handler:    _NameService_GetName_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _NameService_UpdateName_Handler,
		},
		{
			MethodName: "DeleteName",
			Handler:    _NameService_DeleteName_Handler,
		},
		{
			MethodName: "ListNames",
			Handler:    _NameService_ListNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/name-api.proto",
}
